---
import Section from "../Section.astro"
import { skills } from "@cv"

// Agrupar skills por categorías para mejor organización
const skillCategories = {
  "Frontend": ["HTML", "CSS", "JavaScript", "TypeScript", "React", "Next.js", "Tailwind"],
  "Backend": ["Node", "MySQL"], 
  "Tools": ["Git", "GitHub"]
}

const getProficiencyColor = (level: string) => {
  const colors: Record<string, string> = {
    'Beginner': '#ff006f',
    'Intermediate': '#ff6b35', 
    'Advanced': '#ffd700',
    'Expert': '#00ff9f',
    'Master': '#00d4ff'
  };
  return colors[level] || '#00ff9f';
}
---

<Section title="> system/skills --compact">
  <div class="skills-terminal">
    <div class="terminal-output">
      {Object.entries(skillCategories).map(([category, categorySkills]) => (
        <div class="skill-category">
          <div class="category-header">
            <span class="prompt">$ ls {category.toLowerCase()}/</span>
            <div class="category-badge">{categorySkills.length} items</div>
          </div>
          <div class="skills-grid">
            {skills
              .filter(skill => categorySkills.includes(skill.name))
              .map((skill) => {
                const color = getProficiencyColor(skill.level || "Expert")
                return (
                  <div 
                    class="skill-chip" 
                    style={`--skill-color: ${color}`}
                    data-level={skill.level || "Expert"}
                  >
                    <span class="skill-name">{skill.name}</span>
                    <div class="skill-indicator"></div>
                  </div>
                )
              })}
          </div>
        </div>
      ))}
      
      <!-- Skills adicionales que no están categorizados -->
      {skills.filter(skill => 
        !Object.values(skillCategories).flat().includes(skill.name)
      ).length > 0 && (
        <div class="skill-category">
          <div class="category-header">
            <span class="prompt">$ ls others/</span>
            <div class="category-badge">
              {skills.filter(skill => 
                !Object.values(skillCategories).flat().includes(skill.name)
              ).length} items
            </div>
          </div>
          <div class="skills-grid">
            {skills
              .filter(skill => !Object.values(skillCategories).flat().includes(skill.name))
              .map((skill) => {
                const color = getProficiencyColor(skill.level || "Expert")
                return (
                  <div 
                    class="skill-chip" 
                    style={`--skill-color: ${color}`}
                    data-level={skill.level || "Expert"}
                  >
                    <span class="skill-name">{skill.name}</span>
                    <div class="skill-indicator"></div>
                  </div>
                )
              })}
          </div>
        </div>
      )}
    </div>
  </div>
</Section>

<script>
  const skillChips = document.querySelectorAll('.skill-chip');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const chips = entry.target.querySelectorAll('.skill-chip');
        chips.forEach((chip, index) => {
          setTimeout(() => {
            chip.classList.add('animate');
          }, index * 100);
        });
      }
    });
  }, { threshold: 0.2 });
  
  document.querySelectorAll('.skill-category').forEach((category) => {
    observer.observe(category);
  });

  // Tooltip interactivo para mostrar el nivel de skill
  skillChips.forEach((chip) => {
    chip.addEventListener('mouseenter', (e) => {
      const target = e.target as HTMLElement;
      if (!target) return;
      
      const level = target.getAttribute('data-level');
      const tooltip = document.createElement('div');
      tooltip.className = 'skill-tooltip';
      tooltip.textContent = level || 'Expert';
      document.body.appendChild(tooltip);
      
      const rect = target.getBoundingClientRect();
      tooltip.style.left = rect.left + rect.width / 2 + 'px';
      tooltip.style.top = rect.top - 40 + 'px';
      
      setTimeout(() => tooltip.classList.add('visible'), 10);
    });
    
    chip.addEventListener('mouseleave', () => {
      document.querySelectorAll('.skill-tooltip').forEach(tooltip => {
        tooltip.classList.remove('visible');
        setTimeout(() => tooltip.remove(), 200);
      });
    });
  });
</script>

<style>
  .skills-terminal {
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid #00ff9f;
    border-radius: 10px;
    padding: 20px;
    backdrop-filter: blur(10px);
    box-shadow: 0 0 20px rgba(0, 255, 159, 0.2);
    margin-top: 20px;
  }

  .terminal-output {
    display: flex;
    flex-direction: column;
    gap: 25px;
  }

  .skill-category {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .skill-category:nth-child(1) { animation-delay: 0.1s; }
  .skill-category:nth-child(2) { animation-delay: 0.2s; }
  .skill-category:nth-child(3) { animation-delay: 0.3s; }

  .category-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 12px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(0, 255, 159, 0.3);
  }

  .prompt {
    color: #ff006f;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .category-badge {
    background: rgba(0, 255, 159, 0.2);
    color: #00ff9f;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.7rem;
    border: 1px solid rgba(0, 255, 159, 0.4);
  }

  .skills-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .skill-chip {
    position: relative;
    background: rgba(26, 26, 46, 0.8);
    border: 1px solid var(--skill-color, #00ff9f);
    border-radius: 20px;
    padding: 8px 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
    transform: scale(0.8);
    backdrop-filter: blur(5px);
    overflow: hidden;
  }

  .skill-chip.animate {
    opacity: 1;
    transform: scale(1);
  }

  .skill-chip::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, var(--skill-color, #00ff9f), transparent);
    opacity: 0.3;
    transition: left 0.5s ease;
  }

  .skill-chip:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 
      0 4px 15px rgba(0, 255, 159, 0.4),
      0 0 20px var(--skill-color, #00ff9f);
    border-color: var(--skill-color, #00ff9f);
  }

  .skill-chip:hover::before {
    left: 100%;
  }

  .skill-name {
    color: var(--skill-color, #00ff9f);
    font-size: 0.8rem;
    font-weight: 500;
    text-shadow: 0 0 5px var(--skill-color, #00ff9f);
    position: relative;
    z-index: 1;
  }

  .skill-indicator {
    position: absolute;
    top: 2px;
    right: 2px;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: var(--skill-color, #00ff9f);
    box-shadow: 0 0 8px var(--skill-color, #00ff9f);
    animation: pulse 2s infinite;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.2);
    }
  }

  /* Tooltip global */
  .skill-tooltip {
    position: fixed;
    background: rgba(0, 0, 0, 0.9);
    color: #00ff9f;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    border: 1px solid #00ff9f;
    box-shadow: 0 0 10px rgba(0, 255, 159, 0.5);
    z-index: 1000;
    transform: translateX(-50%);
    opacity: 0;
    transition: opacity 0.2s ease;
    pointer-events: none;
    backdrop-filter: blur(10px);
  }

  .skill-tooltip.visible {
    opacity: 1;
  }

  .skill-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: #00ff9f;
  }

  /* Responsive */
  @media (width <= 768px) {
    .skills-terminal {
      padding: 15px;
    }

    .terminal-output {
      gap: 20px;
    }

    .category-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .skills-grid {
      gap: 6px;
    }

    .skill-chip {
      padding: 6px 12px;
      font-size: 0.75rem;
    }

    .prompt {
      font-size: 0.8rem;
    }
  }

  @media (width <= 480px) {
    .skill-chip {
      padding: 5px 10px;
    }

    .skill-name {
      font-size: 0.7rem;
    }

    .skills-grid {
      gap: 4px;
    }
  }
</style>

