---
import Section from "../Section.astro"
import HTML from "@/icons/html.astro"
import CSS from "@/icons/css.astro"
import JavaScript from "@/icons/javascript.astro"
import TypeScript from "@/icons/type.astro"
import React from "@/icons/react.astro"
import Node from "@/icons/node.astro"
import MySQL from "@/icons/sql.astro"
import Git from "@/icons/git.astro"
import GitHub from "@/icons/GitHub.astro"
import Tailwind from "@/icons/tailwind.astro"
import Next from "@/icons/next.astro"
import { skills } from "@cv"

const SKILLS_ICONS: Record<string, any> = {
  HTML,
  CSS,
  JavaScript,
  TypeScript,
  React,
  Node,
  MySQL,
  Git,
  GitHub,
  Next,
  Tailwind,
}

const getProficiencyLevel = (level: string) => {
  const levels: Record<string, number> = {
    'Beginner': 25,
    'Intermediate': 50,
    'Advanced': 75,
    'Expert': 90,
    'Master': 95
  };
  return levels[level] || 85;
}
---

<Section title="> system/skills --interactive">
  <div class="skills-matrix">
    {
      skills.map(({ name, level, keywords }, index) => {
        const iconName = name === "Next.js" ? "Next" : name
        const Icon = SKILLS_ICONS[iconName]
        const proficiency = getProficiencyLevel(level || "Expert")

        return (
          <div class="skill-node" data-index={index}>
            <div class="skill-header">
              <div class="skill-icon-container">
                {Icon && <Icon />}
              </div>
              <div class="skill-info">
                <h3 class="skill-name glitch-text">{name}</h3>
                <div class="skill-level">{level || "Expert"}</div>
              </div>
            </div>
            <div class="skill-bar-container">
              <div class="skill-bar">
                <div 
                  class="skill-progress" 
                  data-progress={proficiency}
                  style={`--progress: ${proficiency}%`}
                ></div>
                <div class="skill-sparks"></div>
              </div>
              <div class="skill-percentage">{proficiency}%</div>
            </div>
            {keywords && keywords.length > 0 && (
              <div class="skill-tags">
                {keywords.slice(0, 3).map((keyword) => (
                  <span class="skill-tag">{keyword}</span>
                ))}
              </div>
            )}
          </div>
        )
      })
    }
  </div>
</Section>

<script>
  const skillNodes = document.querySelectorAll('.skill-node');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const progressBar = entry.target.querySelector('.skill-progress');
        const sparks = entry.target.querySelector('.skill-sparks');
        const progress = progressBar?.getAttribute('data-progress');
        
        if (progressBar && progress) {
          setTimeout(() => {
            progressBar.style.setProperty('--animate-progress', `${progress}%`);
            progressBar.classList.add('animate');
            sparks?.classList.add('active');
          }, parseInt(entry.target.getAttribute('data-index') || '0') * 200);
        }
      }
    });
  }, { threshold: 0.3 });
  
  skillNodes.forEach((node) => observer.observe(node));
</script>

<style>
  .skills-matrix {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }

  .skill-node {
    background: linear-gradient(135deg, rgba(0, 255, 159, 0.1), rgba(255, 0, 111, 0.1));
    border: 1px solid rgba(0, 255, 159, 0.3);
    border-radius: 10px;
    padding: 20px;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .skill-node::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 255, 159, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .skill-node:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 255, 159, 0.3);
    border-color: #00ff9f;
  }

  .skill-node:hover::before {
    left: 100%;
  }

  .skill-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
  }

  .skill-icon-container {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 255, 159, 0.2);
    border-radius: 8px;
    border: 1px solid #00ff9f;
  }

  .skill-info {
    flex: 1;
  }

  .skill-name {
    color: #ffffff;
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 0 0 10px rgba(0, 255, 159, 0.5);
  }

  .glitch-text {
    position: relative;
  }

  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    left: 2px;
    text-shadow: -2px 0 #ff006f;
    top: 0;
    color: #ff006f;
    background: transparent;
    overflow: hidden;
    animation: noise-anim-2 15s infinite linear alternate-reverse;
  }

  .glitch-text::before {
    content: attr(data-text);
    position: absolute;
    left: -2px;
    text-shadow: 2px 0 #00ff9f;
    top: 0;
    color: #00ff9f;
    background: transparent;
    overflow: hidden;
    animation: noise-anim 2s infinite linear alternate-reverse;
  }

  @keyframes noise-anim {
    0% { clip-path: inset(29% 0 71% 0); }
    5% { clip-path: inset(41% 0 59% 0); }
    10% { clip-path: inset(25% 0 75% 0); }
    15% { clip-path: inset(54% 0 46% 0); }
    20% { clip-path: inset(76% 0 24% 0); }
    25% { clip-path: inset(30% 0 70% 0); }
    30% { clip-path: inset(67% 0 33% 0); }
    35% { clip-path: inset(15% 0 85% 0); }
    40% { clip-path: inset(82% 0 18% 0); }
    45% { clip-path: inset(38% 0 62% 0); }
    50% { clip-path: inset(71% 0 29% 0); }
    55% { clip-path: inset(22% 0 78% 0); }
    60% { clip-path: inset(93% 0 7% 0); }
    65% { clip-path: inset(14% 0 86% 0); }
    70% { clip-path: inset(58% 0 42% 0); }
    75% { clip-path: inset(87% 0 13% 0); }
    80% { clip-path: inset(33% 0 67% 0); }
    85% { clip-path: inset(49% 0 51% 0); }
    90% { clip-path: inset(65% 0 35% 0); }
    95% { clip-path: inset(17% 0 83% 0); }
    100% { clip-path: inset(78% 0 22% 0); }
  }

  @keyframes noise-anim-2 {
    0% { clip-path: inset(76% 0 24% 0); }
    10% { clip-path: inset(54% 0 46% 0); }
    20% { clip-path: inset(22% 0 78% 0); }
    30% { clip-path: inset(89% 0 11% 0); }
    40% { clip-path: inset(33% 0 67% 0); }
    50% { clip-path: inset(67% 0 33% 0); }
    60% { clip-path: inset(11% 0 89% 0); }
    70% { clip-path: inset(44% 0 56% 0); }
    80% { clip-path: inset(78% 0 22% 0); }
    90% { clip-path: inset(19% 0 81% 0); }
    100% { clip-path: inset(56% 0 44% 0); }
  }

  .skill-level {
    color: #00ff9f;
    font-size: 0.8rem;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .skill-bar-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
  }

  .skill-bar {
    flex: 1;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    overflow: hidden;
    position: relative;
  }

  .skill-progress {
    height: 100%;
    background: linear-gradient(90deg, #00ff9f, #ff006f);
    border-radius: 10px;
    width: 0;
    position: relative;
    transition: width 2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .skill-progress.animate {
    width: var(--animate-progress, 0%);
  }

  .skill-progress::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 4px;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
  }

  .skill-sparks {
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    pointer-events: none;
  }

  .skill-sparks.active::after {
    content: 'âš¡';
    position: absolute;
    color: #fff;
    font-size: 12px;
    animation: sparkle 1s ease-out;
  }

  @keyframes sparkle {
    0% {
      opacity: 0;
      transform: scale(0.5) rotate(0deg);
    }
    50% {
      opacity: 1;
      transform: scale(1.2) rotate(180deg);
    }
    100% {
      opacity: 0;
      transform: scale(0.5) rotate(360deg);
    }
  }

  .skill-percentage {
    color: #00ff9f;
    font-weight: 600;
    font-size: 0.9rem;
    min-width: 35px;
    text-align: right;
  }

  .skill-tags {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .skill-tag {
    background: rgba(255, 0, 111, 0.2);
    color: #ff006f;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.7rem;
    border: 1px solid rgba(255, 0, 111, 0.4);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  @media (width <= 768px) {
    .skills-matrix {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .skill-node {
      padding: 15px;
    }

    .skill-header {
      gap: 10px;
    }

    .skill-icon-container {
      width: 32px;
      height: 32px;
    }

    .skill-name {
      font-size: 1rem;
    }
  }
</style>

