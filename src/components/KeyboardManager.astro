---
import 'hotkeypad/reset.css'
import 'hotkeypad/index.css'
import { type SocialIcon } from "@/types"
import { basics } from "@cv"

const { profiles } = basics

const SOCIAL_ICONS: SocialIcon = {
  GitHub: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><path
    fill="currentColor"
    d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
  ></path></svg
>`,
  LinkedIn: `<svg
  height="16"
  width="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>LinkedIn</title><path
    fill="currentColor"
    d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
  ></path></svg
>`,
  X: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>X</title><path
    fill="currentColor"
    d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
  ></path></svg
>
`
}

const profilesInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_ICONS[network]
  const firstLetter = network[0].toUpperCase()

  return {
    id: network,
    section: "Social",
    title: `Visitar ${network}`,
    url,
    icon,
    hotkey: `ctrl+${firstLetter}`
  }
})
---

<footer id="normal-footer" class="no-print cyber-footer">
  <span class="footer-text">Pulsa <kbd>Cmd</kbd> + <kbd>K</kbd> para acceder a la <span class="neon-text">matriz</span></span>
</footer>

<div id="footer-button" class="no-print cyber-button">
  <div class="button-glow"></div>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="cyber-icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    stroke-width="2"
    stroke="currentColor"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <path
      d="M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10"
    ></path>
  </svg>
  <div class="scan-line"></div>
</div>

<div
  id="hotkeypad"
  data-placeholder="Buscar comando"
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<script>
  interface Info {
    id: string
    section: string
    title: string
    url: string
    icon: string
    hotkey: string
    handler?: () => void
  }

  import HotKeyPad from "hotkeypad"

  const hotkeypad = new HotKeyPad()
  const info = hotkeypad.instance.getAttribute("data-info") ?? "[]"
  const parsedInfo = JSON.parse(info) as Info[]

  const data = parsedInfo.map(
    ({ url, hotkey, icon, id, section, title }) => {
      return {
        id,
        title,
        icon,
        hotkey,
        section,
        handler: () => {
          window.open(url, "_blank")
        }
      }
    }
  )
  hotkeypad.setCommands([
    {
      id: "print",
      title: "Imprimir",
      icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
</svg>`,
      hotkey: "ctrl+P",
      section: "Acciones",
      handler: () => {
        // window.print()
      }
    },
    ...data
  ])

  const footerButton = document.getElementById("footer-button")
  footerButton?.addEventListener("click", () => {
    var event = new KeyboardEvent("keydown", {
      key: "K",
      code: "KeyK",
      keyCode: 75,
      which: 75,
      ctrlKey: true,
      altKey: false,
      shiftKey: false,
      metaKey: false
    })

    document.dispatchEvent(event)
  })
</script>

<style>
  @keyframes cyberFadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes neonPulse {
    0%, 100% {
      box-shadow: 0 0 10px #00ff9f, 0 0 20px #00ff9f, 0 0 30px #00ff9f;
    }
    50% {
      box-shadow: 0 0 20px #00ff9f, 0 0 30px #00ff9f, 0 0 40px #00ff9f, 0 0 50px #ff006f;
    }
  }

  @keyframes scanLineMove {
    0% { transform: translateY(-100%); opacity: 0; }
    10% { opacity: 1; }
    90% { opacity: 1; }
    100% { transform: translateY(100%); opacity: 0; }
  }

  @keyframes buttonGlow {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.8; }
  }

  /* Desktop Footer */
  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  /* Mobile Button */
  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      display: flex;
    }
  }

  .cyber-footer {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(26, 26, 46, 0.9));
    border-top: 2px solid #00ff9f;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding: 12px 0;
    text-align: center;
    font-size: 0.9rem;
    backdrop-filter: blur(10px);
    z-index: 1000;

    animation: cyberFadeIn 0.5s ease-out;
    box-shadow: 0 -5px 20px rgba(0, 255, 159, 0.2);
  }

  .footer-text {
    color: #b3b3b3;
    font-family: 'JetBrains Mono', monospace;
    text-shadow: 0 0 5px rgba(179, 179, 179, 0.3);
  }

  .neon-text {
    color: #00ff9f;
    font-weight: 600;
    text-shadow: 0 0 10px #00ff9f;
  }

  .cyber-button {
    position: fixed;
    right: 20px;
    bottom: 20px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(26, 26, 46, 0.8));
    border: 2px solid #00ff9f;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 99999 !important; /* Maximum z-index to stay above everything */
    backdrop-filter: blur(10px);
    overflow: hidden;
    animation: neonPulse 2s ease-in-out infinite;
  }

  .cyber-button:hover {
    transform: scale(1.1);
    background: linear-gradient(135deg, rgba(0, 255, 159, 0.2), rgba(255, 0, 111, 0.2));
    box-shadow: 0 0 30px #00ff9f, 0 0 50px #00ff9f;
  }

  .button-glow {
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, #00ff9f, #ff006f, #00ff9f);
    border-radius: 50%;
    z-index: -1;
    animation: buttonGlow 2s ease-in-out infinite;
    opacity: 0.3;
  }

  .cyber-icon {
    color: #00ff9f;
    filter: drop-shadow(0 0 5px #00ff9f);
    z-index: 2;
  }

  .scan-line {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, #00ff9f, transparent);
    animation: scanLineMove 3s linear infinite;
    z-index: 1;
  }

  kbd {
    background: linear-gradient(135deg, rgba(0, 255, 159, 0.2), rgba(0, 255, 159, 0.1));
    border: 1px solid rgba(0, 255, 159, 0.5);
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    font-family: 'JetBrains Mono', monospace;
    color: #00ff9f;
    text-shadow: 0 0 5px rgba(0, 255, 159, 0.5);
    box-shadow: 0 0 10px rgba(0, 255, 159, 0.2);
  }

  /* Override hotkeypad styles for cyberpunk theme */
  :global(.hotkeypad),
  :global([data-hotkeypad]),
  :global(.hotkeypad-container),
  :global(.hotkeypad-modal) {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.98), rgba(26, 26, 46, 0.98)) !important;
    border: 2px solid #00ff9f !important;
    border-radius: 15px !important;
    backdrop-filter: blur(20px) !important;
    box-shadow:
      0 0 40px rgba(0, 255, 159, 0.4),
      inset 0 0 40px rgba(0, 255, 159, 0.1) !important;
    z-index: 100000 !important;
  }

  :global(.hotkeypad *),
  :global([data-hotkeypad] *) {
    font-family: 'JetBrains Mono', monospace !important;
  }

  :global(.hotkeypad input),
  :global([data-hotkeypad] input) {
    background: rgba(0, 0, 0, 0.7) !important;
    border: 1px solid rgba(0, 255, 159, 0.5) !important;
    color: #ffffff !important;
    font-family: 'JetBrains Mono', monospace !important;
    border-radius: 8px !important;
    padding: 12px 16px !important;
    font-size: 14px !important;
    box-shadow: 0 0 10px rgba(0, 255, 159, 0.2) !important;
  }

  :global(.hotkeypad input:focus),
  :global([data-hotkeypad] input:focus) {
    outline: none !important;
    border-color: #00ff9f !important;
    box-shadow: 0 0 20px rgba(0, 255, 159, 0.5) !important;
  }

  :global(.hotkeypad input::placeholder),
  :global([data-hotkeypad] input::placeholder) {
    color: #888 !important;
    font-style: italic !important;
  }

  :global(.hotkeypad .command),
  :global([data-hotkeypad] .command) {
    background: rgba(0, 255, 159, 0.05) !important;
    border: 1px solid rgba(0, 255, 159, 0.2) !important;
    color: #b3b3b3 !important;
    border-radius: 8px !important;
    padding: 12px 16px !important;
    margin: 4px 0 !important;
    transition: all 0.2s ease !important;
  }

  :global(.hotkeypad .command:hover),
  :global([data-hotkeypad] .command:hover) {
    background: rgba(0, 255, 159, 0.15) !important;
    border-color: rgba(0, 255, 159, 0.4) !important;
    box-shadow: 0 0 15px rgba(0, 255, 159, 0.3) !important;
    transform: translateX(4px) !important;
    color: #ffffff !important;
  }

  :global(.hotkeypad .command.selected),
  :global([data-hotkeypad] .command.selected) {
    background: rgba(0, 255, 159, 0.25) !important;
    border-color: #00ff9f !important;
    box-shadow: 0 0 20px rgba(0, 255, 159, 0.5) !important;
    color: #ffffff !important;
    transform: translateX(6px) !important;
  }

  :global(.hotkeypad .command .title),
  :global([data-hotkeypad] .command .title) {
    color: inherit !important;
    font-weight: 500 !important;
  }

  :global(.hotkeypad .command .section),
  :global([data-hotkeypad] .command .section) {
    color: #00ff9f !important;
    font-size: 0.8rem !important;
    opacity: 0.8 !important;
  }

  :global(.hotkeypad .command .hotkey),
  :global([data-hotkeypad] .command .hotkey) {
    background: rgba(255, 0, 111, 0.2) !important;
    border: 1px solid rgba(255, 0, 111, 0.4) !important;
    color: #ff006f !important;
    padding: 2px 6px !important;
    border-radius: 4px !important;
    font-size: 0.7rem !important;
    text-shadow: 0 0 5px rgba(255, 0, 111, 0.5) !important;
  }

  /* Overlay background */
  :global(.hotkeypad-overlay) {
    background: rgba(0, 0, 0, 0.8) !important;
    backdrop-filter: blur(5px) !important;
    z-index: 99998 !important;
  }
</style>
